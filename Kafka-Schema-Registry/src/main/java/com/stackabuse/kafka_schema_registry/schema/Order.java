/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.stackabuse.kafka_schema_registry.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4705710177772213272L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"com.stackabuse.kafka_schema_registry.schema\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"Id of the order\"},{\"name\":\"product_name\",\"type\":\"string\",\"doc\":\"Name of the product\"},{\"name\":\"product_id\",\"type\":\"string\",\"doc\":\"Id of the product\"},{\"name\":\"product_type\",\"type\":\"string\",\"doc\":\"Type of the product\"},{\"name\":\"product_count\",\"type\":\"int\",\"doc\":\"Count of Product Items\"},{\"name\":\"listing_date\",\"type\":\"string\",\"doc\":\"Date when the Product is listed\"},{\"name\":\"customer_id\",\"type\":\"string\",\"doc\":\"ID of the customer\"},{\"name\":\"customer_email\",\"type\":\"string\",\"doc\":\"Email ID of the customer\"},{\"name\":\"customer_name\",\"type\":\"string\",\"doc\":\"Name of the customer\"},{\"name\":\"customer_mobile\",\"type\":\"string\",\"doc\":\"Mobile number of customer\"},{\"name\":\"shipping_address\",\"type\":\"string\",\"doc\":\"Address of the customer to be shipped\"},{\"name\":\"shipping_pincode\",\"type\":\"string\",\"doc\":\"Pincode to be shipped\"},{\"name\":\"status\",\"type\":\"string\",\"doc\":\"Status of the order\"},{\"name\":\"price\",\"type\":\"float\",\"doc\":\"Total price of the order\"},{\"name\":\"weight\",\"type\":\"float\",\"doc\":\"Weight of the items\"},{\"name\":\"automated_email\",\"type\":\"boolean\",\"doc\":\"Field indicating if the user is enrolled in marketing emails\",\"default\":true}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Order> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Order to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Order from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Order instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Id of the order */
  private java.lang.CharSequence id;
  /** Name of the product */
  private java.lang.CharSequence product_name;
  /** Id of the product */
  private java.lang.CharSequence product_id;
  /** Type of the product */
  private java.lang.CharSequence product_type;
  /** Count of Product Items */
  private int product_count;
  /** Date when the Product is listed */
  private java.lang.CharSequence listing_date;
  /** ID of the customer */
  private java.lang.CharSequence customer_id;
  /** Email ID of the customer */
  private java.lang.CharSequence customer_email;
  /** Name of the customer */
  private java.lang.CharSequence customer_name;
  /** Mobile number of customer */
  private java.lang.CharSequence customer_mobile;
  /** Address of the customer to be shipped */
  private java.lang.CharSequence shipping_address;
  /** Pincode to be shipped */
  private java.lang.CharSequence shipping_pincode;
  /** Status of the order */
  private java.lang.CharSequence status;
  /** Total price of the order */
  private float price;
  /** Weight of the items */
  private float weight;
  /** Field indicating if the user is enrolled in marketing emails */
  private boolean automated_email;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param id Id of the order
   * @param product_name Name of the product
   * @param product_id Id of the product
   * @param product_type Type of the product
   * @param product_count Count of Product Items
   * @param listing_date Date when the Product is listed
   * @param customer_id ID of the customer
   * @param customer_email Email ID of the customer
   * @param customer_name Name of the customer
   * @param customer_mobile Mobile number of customer
   * @param shipping_address Address of the customer to be shipped
   * @param shipping_pincode Pincode to be shipped
   * @param status Status of the order
   * @param price Total price of the order
   * @param weight Weight of the items
   * @param automated_email Field indicating if the user is enrolled in marketing emails
   */
  public Order(java.lang.CharSequence id, java.lang.CharSequence product_name, java.lang.CharSequence product_id, java.lang.CharSequence product_type, java.lang.Integer product_count, java.lang.CharSequence listing_date, java.lang.CharSequence customer_id, java.lang.CharSequence customer_email, java.lang.CharSequence customer_name, java.lang.CharSequence customer_mobile, java.lang.CharSequence shipping_address, java.lang.CharSequence shipping_pincode, java.lang.CharSequence status, java.lang.Float price, java.lang.Float weight, java.lang.Boolean automated_email) {
    this.id = id;
    this.product_name = product_name;
    this.product_id = product_id;
    this.product_type = product_type;
    this.product_count = product_count;
    this.listing_date = listing_date;
    this.customer_id = customer_id;
    this.customer_email = customer_email;
    this.customer_name = customer_name;
    this.customer_mobile = customer_mobile;
    this.shipping_address = shipping_address;
    this.shipping_pincode = shipping_pincode;
    this.status = status;
    this.price = price;
    this.weight = weight;
    this.automated_email = automated_email;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return product_name;
    case 2: return product_id;
    case 3: return product_type;
    case 4: return product_count;
    case 5: return listing_date;
    case 6: return customer_id;
    case 7: return customer_email;
    case 8: return customer_name;
    case 9: return customer_mobile;
    case 10: return shipping_address;
    case 11: return shipping_pincode;
    case 12: return status;
    case 13: return price;
    case 14: return weight;
    case 15: return automated_email;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: product_name = (java.lang.CharSequence)value$; break;
    case 2: product_id = (java.lang.CharSequence)value$; break;
    case 3: product_type = (java.lang.CharSequence)value$; break;
    case 4: product_count = (java.lang.Integer)value$; break;
    case 5: listing_date = (java.lang.CharSequence)value$; break;
    case 6: customer_id = (java.lang.CharSequence)value$; break;
    case 7: customer_email = (java.lang.CharSequence)value$; break;
    case 8: customer_name = (java.lang.CharSequence)value$; break;
    case 9: customer_mobile = (java.lang.CharSequence)value$; break;
    case 10: shipping_address = (java.lang.CharSequence)value$; break;
    case 11: shipping_pincode = (java.lang.CharSequence)value$; break;
    case 12: status = (java.lang.CharSequence)value$; break;
    case 13: price = (java.lang.Float)value$; break;
    case 14: weight = (java.lang.Float)value$; break;
    case 15: automated_email = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Id of the order
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Id of the order
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'product_name' field.
   * @return Name of the product
   */
  public java.lang.CharSequence getProductName() {
    return product_name;
  }


  /**
   * Sets the value of the 'product_name' field.
   * Name of the product
   * @param value the value to set.
   */
  public void setProductName(java.lang.CharSequence value) {
    this.product_name = value;
  }

  /**
   * Gets the value of the 'product_id' field.
   * @return Id of the product
   */
  public java.lang.CharSequence getProductId() {
    return product_id;
  }


  /**
   * Sets the value of the 'product_id' field.
   * Id of the product
   * @param value the value to set.
   */
  public void setProductId(java.lang.CharSequence value) {
    this.product_id = value;
  }

  /**
   * Gets the value of the 'product_type' field.
   * @return Type of the product
   */
  public java.lang.CharSequence getProductType() {
    return product_type;
  }


  /**
   * Sets the value of the 'product_type' field.
   * Type of the product
   * @param value the value to set.
   */
  public void setProductType(java.lang.CharSequence value) {
    this.product_type = value;
  }

  /**
   * Gets the value of the 'product_count' field.
   * @return Count of Product Items
   */
  public int getProductCount() {
    return product_count;
  }


  /**
   * Sets the value of the 'product_count' field.
   * Count of Product Items
   * @param value the value to set.
   */
  public void setProductCount(int value) {
    this.product_count = value;
  }

  /**
   * Gets the value of the 'listing_date' field.
   * @return Date when the Product is listed
   */
  public java.lang.CharSequence getListingDate() {
    return listing_date;
  }


  /**
   * Sets the value of the 'listing_date' field.
   * Date when the Product is listed
   * @param value the value to set.
   */
  public void setListingDate(java.lang.CharSequence value) {
    this.listing_date = value;
  }

  /**
   * Gets the value of the 'customer_id' field.
   * @return ID of the customer
   */
  public java.lang.CharSequence getCustomerId() {
    return customer_id;
  }


  /**
   * Sets the value of the 'customer_id' field.
   * ID of the customer
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.CharSequence value) {
    this.customer_id = value;
  }

  /**
   * Gets the value of the 'customer_email' field.
   * @return Email ID of the customer
   */
  public java.lang.CharSequence getCustomerEmail() {
    return customer_email;
  }


  /**
   * Sets the value of the 'customer_email' field.
   * Email ID of the customer
   * @param value the value to set.
   */
  public void setCustomerEmail(java.lang.CharSequence value) {
    this.customer_email = value;
  }

  /**
   * Gets the value of the 'customer_name' field.
   * @return Name of the customer
   */
  public java.lang.CharSequence getCustomerName() {
    return customer_name;
  }


  /**
   * Sets the value of the 'customer_name' field.
   * Name of the customer
   * @param value the value to set.
   */
  public void setCustomerName(java.lang.CharSequence value) {
    this.customer_name = value;
  }

  /**
   * Gets the value of the 'customer_mobile' field.
   * @return Mobile number of customer
   */
  public java.lang.CharSequence getCustomerMobile() {
    return customer_mobile;
  }


  /**
   * Sets the value of the 'customer_mobile' field.
   * Mobile number of customer
   * @param value the value to set.
   */
  public void setCustomerMobile(java.lang.CharSequence value) {
    this.customer_mobile = value;
  }

  /**
   * Gets the value of the 'shipping_address' field.
   * @return Address of the customer to be shipped
   */
  public java.lang.CharSequence getShippingAddress() {
    return shipping_address;
  }


  /**
   * Sets the value of the 'shipping_address' field.
   * Address of the customer to be shipped
   * @param value the value to set.
   */
  public void setShippingAddress(java.lang.CharSequence value) {
    this.shipping_address = value;
  }

  /**
   * Gets the value of the 'shipping_pincode' field.
   * @return Pincode to be shipped
   */
  public java.lang.CharSequence getShippingPincode() {
    return shipping_pincode;
  }


  /**
   * Sets the value of the 'shipping_pincode' field.
   * Pincode to be shipped
   * @param value the value to set.
   */
  public void setShippingPincode(java.lang.CharSequence value) {
    this.shipping_pincode = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return Status of the order
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * Status of the order
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return Total price of the order
   */
  public float getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * Total price of the order
   * @param value the value to set.
   */
  public void setPrice(float value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'weight' field.
   * @return Weight of the items
   */
  public float getWeight() {
    return weight;
  }


  /**
   * Sets the value of the 'weight' field.
   * Weight of the items
   * @param value the value to set.
   */
  public void setWeight(float value) {
    this.weight = value;
  }

  /**
   * Gets the value of the 'automated_email' field.
   * @return Field indicating if the user is enrolled in marketing emails
   */
  public boolean getAutomatedEmail() {
    return automated_email;
  }


  /**
   * Sets the value of the 'automated_email' field.
   * Field indicating if the user is enrolled in marketing emails
   * @param value the value to set.
   */
  public void setAutomatedEmail(boolean value) {
    this.automated_email = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static com.stackabuse.kafka_schema_registry.schema.Order.Builder newBuilder() {
    return new com.stackabuse.kafka_schema_registry.schema.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static com.stackabuse.kafka_schema_registry.schema.Order.Builder newBuilder(com.stackabuse.kafka_schema_registry.schema.Order.Builder other) {
    if (other == null) {
      return new com.stackabuse.kafka_schema_registry.schema.Order.Builder();
    } else {
      return new com.stackabuse.kafka_schema_registry.schema.Order.Builder(other);
    }
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static com.stackabuse.kafka_schema_registry.schema.Order.Builder newBuilder(com.stackabuse.kafka_schema_registry.schema.Order other) {
    if (other == null) {
      return new com.stackabuse.kafka_schema_registry.schema.Order.Builder();
    } else {
      return new com.stackabuse.kafka_schema_registry.schema.Order.Builder(other);
    }
  }

  /**
   * RecordBuilder for Order instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    /** Id of the order */
    private java.lang.CharSequence id;
    /** Name of the product */
    private java.lang.CharSequence product_name;
    /** Id of the product */
    private java.lang.CharSequence product_id;
    /** Type of the product */
    private java.lang.CharSequence product_type;
    /** Count of Product Items */
    private int product_count;
    /** Date when the Product is listed */
    private java.lang.CharSequence listing_date;
    /** ID of the customer */
    private java.lang.CharSequence customer_id;
    /** Email ID of the customer */
    private java.lang.CharSequence customer_email;
    /** Name of the customer */
    private java.lang.CharSequence customer_name;
    /** Mobile number of customer */
    private java.lang.CharSequence customer_mobile;
    /** Address of the customer to be shipped */
    private java.lang.CharSequence shipping_address;
    /** Pincode to be shipped */
    private java.lang.CharSequence shipping_pincode;
    /** Status of the order */
    private java.lang.CharSequence status;
    /** Total price of the order */
    private float price;
    /** Weight of the items */
    private float weight;
    /** Field indicating if the user is enrolled in marketing emails */
    private boolean automated_email;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.stackabuse.kafka_schema_registry.schema.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.product_name)) {
        this.product_name = data().deepCopy(fields()[1].schema(), other.product_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.product_id)) {
        this.product_id = data().deepCopy(fields()[2].schema(), other.product_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.product_type)) {
        this.product_type = data().deepCopy(fields()[3].schema(), other.product_type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.product_count)) {
        this.product_count = data().deepCopy(fields()[4].schema(), other.product_count);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.listing_date)) {
        this.listing_date = data().deepCopy(fields()[5].schema(), other.listing_date);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[6].schema(), other.customer_id);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.customer_email)) {
        this.customer_email = data().deepCopy(fields()[7].schema(), other.customer_email);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.customer_name)) {
        this.customer_name = data().deepCopy(fields()[8].schema(), other.customer_name);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.customer_mobile)) {
        this.customer_mobile = data().deepCopy(fields()[9].schema(), other.customer_mobile);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.shipping_address)) {
        this.shipping_address = data().deepCopy(fields()[10].schema(), other.shipping_address);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.shipping_pincode)) {
        this.shipping_pincode = data().deepCopy(fields()[11].schema(), other.shipping_pincode);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.status)) {
        this.status = data().deepCopy(fields()[12].schema(), other.status);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.price)) {
        this.price = data().deepCopy(fields()[13].schema(), other.price);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.weight)) {
        this.weight = data().deepCopy(fields()[14].schema(), other.weight);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.automated_email)) {
        this.automated_email = data().deepCopy(fields()[15].schema(), other.automated_email);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(com.stackabuse.kafka_schema_registry.schema.Order other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.product_name)) {
        this.product_name = data().deepCopy(fields()[1].schema(), other.product_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.product_id)) {
        this.product_id = data().deepCopy(fields()[2].schema(), other.product_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.product_type)) {
        this.product_type = data().deepCopy(fields()[3].schema(), other.product_type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.product_count)) {
        this.product_count = data().deepCopy(fields()[4].schema(), other.product_count);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.listing_date)) {
        this.listing_date = data().deepCopy(fields()[5].schema(), other.listing_date);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[6].schema(), other.customer_id);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.customer_email)) {
        this.customer_email = data().deepCopy(fields()[7].schema(), other.customer_email);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.customer_name)) {
        this.customer_name = data().deepCopy(fields()[8].schema(), other.customer_name);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.customer_mobile)) {
        this.customer_mobile = data().deepCopy(fields()[9].schema(), other.customer_mobile);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.shipping_address)) {
        this.shipping_address = data().deepCopy(fields()[10].schema(), other.shipping_address);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.shipping_pincode)) {
        this.shipping_pincode = data().deepCopy(fields()[11].schema(), other.shipping_pincode);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.status)) {
        this.status = data().deepCopy(fields()[12].schema(), other.status);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.price)) {
        this.price = data().deepCopy(fields()[13].schema(), other.price);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.weight)) {
        this.weight = data().deepCopy(fields()[14].schema(), other.weight);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.automated_email)) {
        this.automated_email = data().deepCopy(fields()[15].schema(), other.automated_email);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Id of the order
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Id of the order
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Id of the order
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Id of the order
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_name' field.
      * Name of the product
      * @return The value.
      */
    public java.lang.CharSequence getProductName() {
      return product_name;
    }


    /**
      * Sets the value of the 'product_name' field.
      * Name of the product
      * @param value The value of 'product_name'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setProductName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.product_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'product_name' field has been set.
      * Name of the product
      * @return True if the 'product_name' field has been set, false otherwise.
      */
    public boolean hasProductName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'product_name' field.
      * Name of the product
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearProductName() {
      product_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_id' field.
      * Id of the product
      * @return The value.
      */
    public java.lang.CharSequence getProductId() {
      return product_id;
    }


    /**
      * Sets the value of the 'product_id' field.
      * Id of the product
      * @param value The value of 'product_id'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setProductId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.product_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'product_id' field has been set.
      * Id of the product
      * @return True if the 'product_id' field has been set, false otherwise.
      */
    public boolean hasProductId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'product_id' field.
      * Id of the product
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearProductId() {
      product_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_type' field.
      * Type of the product
      * @return The value.
      */
    public java.lang.CharSequence getProductType() {
      return product_type;
    }


    /**
      * Sets the value of the 'product_type' field.
      * Type of the product
      * @param value The value of 'product_type'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setProductType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.product_type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'product_type' field has been set.
      * Type of the product
      * @return True if the 'product_type' field has been set, false otherwise.
      */
    public boolean hasProductType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'product_type' field.
      * Type of the product
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearProductType() {
      product_type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'product_count' field.
      * Count of Product Items
      * @return The value.
      */
    public int getProductCount() {
      return product_count;
    }


    /**
      * Sets the value of the 'product_count' field.
      * Count of Product Items
      * @param value The value of 'product_count'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setProductCount(int value) {
      validate(fields()[4], value);
      this.product_count = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'product_count' field has been set.
      * Count of Product Items
      * @return True if the 'product_count' field has been set, false otherwise.
      */
    public boolean hasProductCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'product_count' field.
      * Count of Product Items
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearProductCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'listing_date' field.
      * Date when the Product is listed
      * @return The value.
      */
    public java.lang.CharSequence getListingDate() {
      return listing_date;
    }


    /**
      * Sets the value of the 'listing_date' field.
      * Date when the Product is listed
      * @param value The value of 'listing_date'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setListingDate(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.listing_date = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'listing_date' field has been set.
      * Date when the Product is listed
      * @return True if the 'listing_date' field has been set, false otherwise.
      */
    public boolean hasListingDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'listing_date' field.
      * Date when the Product is listed
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearListingDate() {
      listing_date = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer_id' field.
      * ID of the customer
      * @return The value.
      */
    public java.lang.CharSequence getCustomerId() {
      return customer_id;
    }


    /**
      * Sets the value of the 'customer_id' field.
      * ID of the customer
      * @param value The value of 'customer_id'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setCustomerId(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.customer_id = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_id' field has been set.
      * ID of the customer
      * @return True if the 'customer_id' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'customer_id' field.
      * ID of the customer
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearCustomerId() {
      customer_id = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer_email' field.
      * Email ID of the customer
      * @return The value.
      */
    public java.lang.CharSequence getCustomerEmail() {
      return customer_email;
    }


    /**
      * Sets the value of the 'customer_email' field.
      * Email ID of the customer
      * @param value The value of 'customer_email'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setCustomerEmail(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.customer_email = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_email' field has been set.
      * Email ID of the customer
      * @return True if the 'customer_email' field has been set, false otherwise.
      */
    public boolean hasCustomerEmail() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'customer_email' field.
      * Email ID of the customer
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearCustomerEmail() {
      customer_email = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer_name' field.
      * Name of the customer
      * @return The value.
      */
    public java.lang.CharSequence getCustomerName() {
      return customer_name;
    }


    /**
      * Sets the value of the 'customer_name' field.
      * Name of the customer
      * @param value The value of 'customer_name'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setCustomerName(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.customer_name = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_name' field has been set.
      * Name of the customer
      * @return True if the 'customer_name' field has been set, false otherwise.
      */
    public boolean hasCustomerName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'customer_name' field.
      * Name of the customer
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearCustomerName() {
      customer_name = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer_mobile' field.
      * Mobile number of customer
      * @return The value.
      */
    public java.lang.CharSequence getCustomerMobile() {
      return customer_mobile;
    }


    /**
      * Sets the value of the 'customer_mobile' field.
      * Mobile number of customer
      * @param value The value of 'customer_mobile'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setCustomerMobile(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.customer_mobile = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_mobile' field has been set.
      * Mobile number of customer
      * @return True if the 'customer_mobile' field has been set, false otherwise.
      */
    public boolean hasCustomerMobile() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'customer_mobile' field.
      * Mobile number of customer
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearCustomerMobile() {
      customer_mobile = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'shipping_address' field.
      * Address of the customer to be shipped
      * @return The value.
      */
    public java.lang.CharSequence getShippingAddress() {
      return shipping_address;
    }


    /**
      * Sets the value of the 'shipping_address' field.
      * Address of the customer to be shipped
      * @param value The value of 'shipping_address'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setShippingAddress(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.shipping_address = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'shipping_address' field has been set.
      * Address of the customer to be shipped
      * @return True if the 'shipping_address' field has been set, false otherwise.
      */
    public boolean hasShippingAddress() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'shipping_address' field.
      * Address of the customer to be shipped
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearShippingAddress() {
      shipping_address = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'shipping_pincode' field.
      * Pincode to be shipped
      * @return The value.
      */
    public java.lang.CharSequence getShippingPincode() {
      return shipping_pincode;
    }


    /**
      * Sets the value of the 'shipping_pincode' field.
      * Pincode to be shipped
      * @param value The value of 'shipping_pincode'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setShippingPincode(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.shipping_pincode = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'shipping_pincode' field has been set.
      * Pincode to be shipped
      * @return True if the 'shipping_pincode' field has been set, false otherwise.
      */
    public boolean hasShippingPincode() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'shipping_pincode' field.
      * Pincode to be shipped
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearShippingPincode() {
      shipping_pincode = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * Status of the order
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * Status of the order
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.status = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * Status of the order
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'status' field.
      * Status of the order
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearStatus() {
      status = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * Total price of the order
      * @return The value.
      */
    public float getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * Total price of the order
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setPrice(float value) {
      validate(fields()[13], value);
      this.price = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * Total price of the order
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'price' field.
      * Total price of the order
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearPrice() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'weight' field.
      * Weight of the items
      * @return The value.
      */
    public float getWeight() {
      return weight;
    }


    /**
      * Sets the value of the 'weight' field.
      * Weight of the items
      * @param value The value of 'weight'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setWeight(float value) {
      validate(fields()[14], value);
      this.weight = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'weight' field has been set.
      * Weight of the items
      * @return True if the 'weight' field has been set, false otherwise.
      */
    public boolean hasWeight() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'weight' field.
      * Weight of the items
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearWeight() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'automated_email' field.
      * Field indicating if the user is enrolled in marketing emails
      * @return The value.
      */
    public boolean getAutomatedEmail() {
      return automated_email;
    }


    /**
      * Sets the value of the 'automated_email' field.
      * Field indicating if the user is enrolled in marketing emails
      * @param value The value of 'automated_email'.
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder setAutomatedEmail(boolean value) {
      validate(fields()[15], value);
      this.automated_email = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'automated_email' field has been set.
      * Field indicating if the user is enrolled in marketing emails
      * @return True if the 'automated_email' field has been set, false otherwise.
      */
    public boolean hasAutomatedEmail() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'automated_email' field.
      * Field indicating if the user is enrolled in marketing emails
      * @return This builder.
      */
    public com.stackabuse.kafka_schema_registry.schema.Order.Builder clearAutomatedEmail() {
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.product_name = fieldSetFlags()[1] ? this.product_name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.product_id = fieldSetFlags()[2] ? this.product_id : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.product_type = fieldSetFlags()[3] ? this.product_type : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.product_count = fieldSetFlags()[4] ? this.product_count : (java.lang.Integer) defaultValue(fields()[4]);
        record.listing_date = fieldSetFlags()[5] ? this.listing_date : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.customer_id = fieldSetFlags()[6] ? this.customer_id : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.customer_email = fieldSetFlags()[7] ? this.customer_email : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.customer_name = fieldSetFlags()[8] ? this.customer_name : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.customer_mobile = fieldSetFlags()[9] ? this.customer_mobile : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.shipping_address = fieldSetFlags()[10] ? this.shipping_address : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.shipping_pincode = fieldSetFlags()[11] ? this.shipping_pincode : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.status = fieldSetFlags()[12] ? this.status : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.price = fieldSetFlags()[13] ? this.price : (java.lang.Float) defaultValue(fields()[13]);
        record.weight = fieldSetFlags()[14] ? this.weight : (java.lang.Float) defaultValue(fields()[14]);
        record.automated_email = fieldSetFlags()[15] ? this.automated_email : (java.lang.Boolean) defaultValue(fields()[15]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.product_name);

    out.writeString(this.product_id);

    out.writeString(this.product_type);

    out.writeInt(this.product_count);

    out.writeString(this.listing_date);

    out.writeString(this.customer_id);

    out.writeString(this.customer_email);

    out.writeString(this.customer_name);

    out.writeString(this.customer_mobile);

    out.writeString(this.shipping_address);

    out.writeString(this.shipping_pincode);

    out.writeString(this.status);

    out.writeFloat(this.price);

    out.writeFloat(this.weight);

    out.writeBoolean(this.automated_email);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.product_name = in.readString(this.product_name instanceof Utf8 ? (Utf8)this.product_name : null);

      this.product_id = in.readString(this.product_id instanceof Utf8 ? (Utf8)this.product_id : null);

      this.product_type = in.readString(this.product_type instanceof Utf8 ? (Utf8)this.product_type : null);

      this.product_count = in.readInt();

      this.listing_date = in.readString(this.listing_date instanceof Utf8 ? (Utf8)this.listing_date : null);

      this.customer_id = in.readString(this.customer_id instanceof Utf8 ? (Utf8)this.customer_id : null);

      this.customer_email = in.readString(this.customer_email instanceof Utf8 ? (Utf8)this.customer_email : null);

      this.customer_name = in.readString(this.customer_name instanceof Utf8 ? (Utf8)this.customer_name : null);

      this.customer_mobile = in.readString(this.customer_mobile instanceof Utf8 ? (Utf8)this.customer_mobile : null);

      this.shipping_address = in.readString(this.shipping_address instanceof Utf8 ? (Utf8)this.shipping_address : null);

      this.shipping_pincode = in.readString(this.shipping_pincode instanceof Utf8 ? (Utf8)this.shipping_pincode : null);

      this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);

      this.price = in.readFloat();

      this.weight = in.readFloat();

      this.automated_email = in.readBoolean();

    } else {
      for (int i = 0; i < 16; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.product_name = in.readString(this.product_name instanceof Utf8 ? (Utf8)this.product_name : null);
          break;

        case 2:
          this.product_id = in.readString(this.product_id instanceof Utf8 ? (Utf8)this.product_id : null);
          break;

        case 3:
          this.product_type = in.readString(this.product_type instanceof Utf8 ? (Utf8)this.product_type : null);
          break;

        case 4:
          this.product_count = in.readInt();
          break;

        case 5:
          this.listing_date = in.readString(this.listing_date instanceof Utf8 ? (Utf8)this.listing_date : null);
          break;

        case 6:
          this.customer_id = in.readString(this.customer_id instanceof Utf8 ? (Utf8)this.customer_id : null);
          break;

        case 7:
          this.customer_email = in.readString(this.customer_email instanceof Utf8 ? (Utf8)this.customer_email : null);
          break;

        case 8:
          this.customer_name = in.readString(this.customer_name instanceof Utf8 ? (Utf8)this.customer_name : null);
          break;

        case 9:
          this.customer_mobile = in.readString(this.customer_mobile instanceof Utf8 ? (Utf8)this.customer_mobile : null);
          break;

        case 10:
          this.shipping_address = in.readString(this.shipping_address instanceof Utf8 ? (Utf8)this.shipping_address : null);
          break;

        case 11:
          this.shipping_pincode = in.readString(this.shipping_pincode instanceof Utf8 ? (Utf8)this.shipping_pincode : null);
          break;

        case 12:
          this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          break;

        case 13:
          this.price = in.readFloat();
          break;

        case 14:
          this.weight = in.readFloat();
          break;

        case 15:
          this.automated_email = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










